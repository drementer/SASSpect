////
/// @group medya
////

/// @type map
/// @require {function} px2em
///
/// @example scss - Px ile kullanım
///   $medya-boyutlari: (
///    'xs': 360px,
///    'sm': 576px
///   ) !default;
///
/// @example scss - Em ile kullanım
///   $medya-boyutlari: (
///    'xs': px2em(360),
///    'sm': px2em(576)
///   ) !default;
///
/// @example scss - Karma kullanım
///   $medya-boyutlari: (
///    'xs': 360px,
///    'sm': px2em(576)
///   ) !default;
///
$medya-boyutlari: (
  xs: px2em(360px),
  sm: px2em(576px),
  md: px2em(768px),
  lg: px2em(992px),
  xl: px2em(1200px),
  ul: px2em(1400px),
) !default;

/// `medya-boyutlarini-goster`i çalıştırır.
/// 
/// @type boolen
$medya-boyutlarini-goster: true !default;

/// `medya-boyutlarini-goster` için `$medya-boyutlari`ni kullanıp
/// kullanmayacağını belirler.
/// 
/// @type boolen
$varsayilan-medya-boyutlarini-kullan: true !default;

/// Medya değerini '$medya-boyutlari'ndan alır
///
/// @param {string} $deger - Alınacak değer
/// @require {variable} $medya-boyutlari - Medya boyutlari
/// @return {number} - Medya değeri
/// @throw `$deger`, `$medya-boyutlari` içinde yok
///
/// @example
///   @debug medya-degeri-al(xl);
///     //-> 75em
///
@function medya-degeri-al($deger) {
  @if map-has-key($medya-boyutlari, $deger) {
    @return map-get($medya-boyutlari, $deger);
  } @else {
    @error $deger + " `$medya-boyutlari` içinde yok";
  }
}

/// Css @media sorgularının süpergücü.
///
/// @param {number} $bitis [null] - Girilen max-width değeri
/// @param {number} $baslangic [null] - Girilen min-width değeri
/// @param {number} $max-width [null] - Atanan max-width değeri
/// @param {number} $min-width [null] - Atanan min-width değeri
/// @param {string} $medya-query - Medya sorgusu
///
/// @require {function} medya-degeri-al - Medya değerini çekmek için
/// @require {variable} $medya-boyutlari - Medya Boyutları
///
/// @output {string} - Medya sorgusu
///
/// @example scss - Basit kullanım
///   .foo {
///     @include medya(xl) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 75em) { .foo { color: white; }
///
/// @example scss - Özel değer ile kullanım
///   .foo {
///     @include medya(1400px) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 1400px) { .foo { color: white; }
///
/// @example scss - Unitless değer ile kullanım
///   .foo {
///     @include medya(1400) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 1400px) { .foo { color: white; }
///
/// @example scss - px2em fonksiyon ile kullanımı
///   .foo {
///     @include medya(px2em(1400px)) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 87.5em) { .foo { color: white; }
///
/// @example scss - min-width query oluşturma
///   .foo {
///     @include min-medya(xl) {
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) { .foo { color: white; }
///
/// @example scss - min-width query oluşturma
///   .foo {
///     @include medya($baslangic: xl) {
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) { .foo { color: white; }
///
/// @example scss - max-width query oluşturma
///   .foo {
///     @include max-medya(xl) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 75em) { .foo { color: white; }
///
/// @example scss - Aralık belirleme
///   .foo {
///     $bitis: ul;
///     $baslangic: xl;
///     @include medya($bitis, $baslangic) {
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) and (max-width: 87.5em) { .foo { color: white; }
///
/// @example scss - Aralık belirleme
///   .foo {
///     @include medya($baslangic: xl, $bitis: ul) {
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) and (max-width: 87.5em) { .foo { color: white; }
///
/// @example scss - Aralık belirleme
///   .foo{
///     $bitis: ul;
///     $baslangic: xl;
///     @include aralik-medya($baslangic, $bitis){
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) and (max-width: 87.5em) { .foo { color: white; }
///
@mixin medya($bitis: null, $baslangic: null) {
  $max-width: null;
  $min-width: null;
  $medya-query: '';

  @if $bitis {
    @if type-of($bitis) == number {
      @if unitless($bitis) {
        $max-width: $bitis + 'px';
      } @else {
        $max-width: $bitis;
      }
    } @else {
      $max-width: #{medya-degeri-al($bitis)};
    }
  }

  @if $baslangic {
    @if type-of($baslangic) == number {
      @if unitless($baslangic) {
        $min-width: $baslangic + 'px';
      } @else {
        $min-width: $baslangic;
      }
    } @else {
      $min-width: #{medya-degeri-al($baslangic)};
    }
  }

  @if $max-width and $min-width {
    $medya-query: '(min-width: #{$min-width}) and (max-width: #{$max-width})';
  } @else if $max-width {
    $medya-query: '(max-width: #{$max-width})';
  } @else if $min-width {
    $medya-query: '(min-width: #{$min-width})';
  }

  @media screen and #{$medya-query} {
    @content;
  }
}

// Kısayollar

/// Minimum medya ve üzerinde çalışacak sorgu.
///
/// @alias medya
///
/// @param {string | number} $deger - Girilen min-width değeri
/// @require {mixin} medya - Medya sorgusu
///
@mixin min-medya($deger) {
  @include medya(null, $deger) {
    @content;
  }
}

/// Maximum medya ve üzerinde çalışacak sorgu.
/// `medya` mixin'in varsayılan kullanımına çok benzer ama
/// daha pratik bir kullanım sunar.
///
/// @alias medya
///
/// @param {string | number} $deger - Girilen max-width değeri
/// @require {mixin} medya - Medya sorgusu
///
@mixin max-medya($deger) {
  @include medya($deger) {
    @content;
  }
}

/// 2 nokta arası veya dışında çalışacak sorgu.
/// `medya` mixin'in aralık kullanımına çok benzer ama
/// elbetteki ona göre daha kolay ve anlaşılır bir kullanım sunar
/// ve de önerilen kullanımdır.
///
/// @alias medya
///
/// @param {string | number} $bitis - Girilen max-width değeri
/// @param {string | number} $baslangic - Girilen min-width değeri
/// @require {mixin} medya - Medya sorgusu
///
@mixin aralik-medya($baslangic, $bitis) {
  @include medya($bitis, $baslangic) {
    @content;
  }
}

/// Ekranda medya boyutlarını gösterir.
///
/// @param {map} $boyutlar [$medya-boyutlari] - Gösterilecek medya boyutları
/// @require {mixin} medya - Medya sorgusu
///
@mixin medya-boyutlarini-goster($boyutlar: $medya-boyutlari) {
  @if $medya-boyutlarini-goster {
    body::after {
      position: fixed;
      z-index: 99;
      right: 0;
      top: 0;
      padding: 0.5rem 1rem;
      background-color: $beyaz-3;
      border: 1px solid $siyah;

      @each $medya-boyutu-ismi, $medya-boyutu in $boyutlar {
        $boyut: $medya-boyutu-ismi;
        $icerik: '#{$medya-boyutu-ismi}';

        @if $medya-boyutu {
          $boyut: $medya-boyutu;
          $icerik: '#{$medya-boyutu-ismi}: >= #{$boyut}';
        }

        @include min-medya($boyut) {
          content: '#{$icerik}';
        }
      }
    }
  }
}

/**
 * Medya boyutlarını ekranda göstermek için 
 */
@include medya-boyutlarini-goster();
