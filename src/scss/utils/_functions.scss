/// Converts px to em
///
/// @param {number} $px - Px value to translate
/// @param {number} $base-font-size [16px] - Base font size
/// @return {number} - Em value
///
@function px2em($px, $base-font-size: 16px) {
  @if unitless($px) {
    $px: $px * 1px;
  }
  @if comparable($px, 1em) {
    @return $px;
  }
  @return calc($px / $base-font-size) * 1em;
}

/// Converts rem to px
///
/// @param {number} $px - Px value to translate
/// @param {number} $base-font-size [16px] - Base font size
/// @return {number} - Rem value
///
@function px2rem($px, $base-font-size: 16px) {
  @if unitless($px) {
    $px: $px * 1px;
  }
  @if comparable($px, 1rem) {
    @return $px;
  }
  @return calc($px / $base-font-size) * 1rem;
}

/// Lighten a color by mixing it with white.
///
/// @author Sindre Sorhus
///
/// @parameter {Color} $color - Color to lighten
/// @parameter {Number} $percentage - Amount of white color to mix in
/// @return {Color}
///
@function tint($color, $percentage) {
  @return mix(#fff, $color, $percentage);
}

/// Darken a color by mixing it with black.
///
/// @author Sindre Sorhus
///
/// @parameter {Color} $color - Color to darken
/// @parameter {Number} $percentage - Amount of black color to mix in
/// @return {Color}
///
@function shade($color, $percentage) {
  @return mix(#000, $color, $percentage);
}

/// Replace substring `$search` in `$string` with `$replacement`.
///
/// @author Sindre Sorhus
///
/// @parameter {String} $string - String to search
/// @parameter {String} $search - Substring to search for in `$string`
/// @parameter {String} $replacement - Replacement for `$search`
/// @return {String}
///
@function string-replace($string, $search, $replacement: '') {
  $index: str-index(
    $string: $string,
    $substring: $search,
  );

  @if $index {
    @return str-slice($string, $start-at: 1, $end-at: $index - 1) + $replacement +
      string-replace(
        str-slice($string, $start-at: $index + str-length($search)),
        $search,
        $replacement
      );
  }

  @return $string;
}

/// Encode URL-unsafe characters in `$string`.
///
/// @author Sindre Sorhus
///
/// @parameter {String} $string
/// @return {String}
///
@function url-encode($string) {
  $map: (
    // URL reserved characters
    '!': '%21',
    '#': '%23',
    '$': '%24',
    '&': '%26',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '*': '%2A',
    '+': '%2B',
    ',': '%2C',
    '/': '%2F',
    ':': '%3A',
    ';': '%3B',
    '=': '%3D',
    '?': '%3F',
    '@': '%40',
    '[': '%5B',
    ']': '%5D',
    // In case the result is wrapped in double-quotes
    '"': '%22'
  );

  $ret: $string;
  @each $search, $replacement in $map {
    $ret: string-replace($ret, $search, $replacement);
  }

  @return $ret;
}

/// Use SVG anywhere a `url()` is accepted, like in a `background` property.
///
/// @author Sindre Sorhus
///
/// @parameter {String} $svg - SVG string. The `xmlns` attribute is added for you.
///
/// @example
///   body {
///   	background: svg-url('<svg>â€¦</svg>');
///   }
///
@function svg-url($svg) {
  // Add missing namespace
  $namespace: 'xmlns="http://www.w3.org/2000/svg"';
  @if not str-index($string: $svg, $substring: $namespace) {
    $svg: string-replace(
      $string: $svg,
      $search: '<svg',
      $replacement: '<svg #{$namespace}',
    );
  }

  @return url('data:image/svg+xml;utf8,#{url-encode($svg)}');
}
